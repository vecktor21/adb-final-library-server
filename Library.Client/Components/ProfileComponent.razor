@using Library.Client.Services;
@using Library.Domain.Dtos.User;
@inject AuthService authService;
@inject UserService userService;
@inject IJSRuntime js;
<div>
    @if (context.IsAuthorized)
    {
        <div>
            <a href="/cart">Корзина</a>
        </div>
        <div>
            <div>
                @context.CurrentUser.Email
            </div>
            <div>
                <button onclick="@OnLoginClicked">
                    Выйти
                </button>
            </div>
        </div>
        
    }
    else
    {
        <div>
            <button onclick="@OnLoginClicked">
                Войти
            </button>
        </div>
    }

    <div>@errorText</div>
</div>


<ModalComponent @ref=@login Title="Авторизация">
    @if (isAuth)
    {
        <input @bind=@authData.Email type="email" placeholder="Почта" />
        <input @bind=@authData.Password type="password" placeholder="Пароль" />
        <button onclick="@Authorize">Войти</button>
        <button @onclick=@(x=>{isAuth = false;})>Зарегистрироваться</button>
    }
    else
    {
        <input @bind=@createData.Name placeholder="Имя" />
        <input @bind=@createData.Surname placeholder="Фамилия" />
        <input @bind=@createData.Email type="email" placeholder="Почта" />
        <input @bind=@createData.Password type="password" placeholder="Пароль" />
        <input @bind=@createData.RepeatPassword type="password" placeholder="Повторите пароль" />
        <input @bind=@createData.Age type="number" min="0" max="120" placeholder="Возраст" />
        <button onclick="@Register">Зарегистрироваться</button>
        <button @onclick=@(x=>{isAuth = true;})>Войти</button>
    }
</ModalComponent>


@code {

    [CascadingParameter]
    private ContextData context { get; set; }

    private bool isAuthModalVisible{ get; set; }

    private ModalComponent login;


    private AuthorizeUserDto authData = new();
    private CreateUserDto createData = new CreateUserDto
    {
        Role = "USER"
    };

    private bool isAuth = true;
    private string errorText = "";

    private async Task OnLoginClicked(MouseEventArgs e)
    {
        if (context.IsAuthorized)
        {
            context = new ContextData();
            await js.InvokeAsync<string>("localStorage.setItem", "token", "");
        }
        else
        {
            login.ShowModal();
        }
    }


    private async Task Authorize()
    {
        var res = await authService.Authorize(authData);

        if (res.Data != null)
        {
            context.JwtToken = res.Data.AccessToken;
            context.CurrentUser = res.Data.User;
            context.IsAuthorized = true;
            errorText = "";
            await js.InvokeAsync<string>("localStorage.setItem", "token", res.Data.AccessToken);
        }
        else
        {
            context.IsAuthorized = false;
            context.JwtToken = null;
            context.CurrentUser = null;
            errorText = $"Ошибка авторизации: {res.Excetption.Message}";
            await js.InvokeAsync<string>("localStorage.setItem", "token", "");
        }
        login.CloseModal();
    }

    private async Task Register()
    {
        var res = await userService.Register(createData);

        if (res.Data != null)
        {
            authData.Email = res.Data.Email;
            authData.Password = createData.Password;
            errorText = "";

            await Authorize();
        }
        else
        {
            context.IsAuthorized = false;
            context.JwtToken = null;
            context.CurrentUser = null;
            errorText = $"Ошибка Регистрации: {res.Excetption.Message}";
        }
        login.CloseModal();
    }
}
