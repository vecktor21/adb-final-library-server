@using Library.Client.Services;
@inject AuthService authService;
@inject IJSRuntime js;

<CascadingValue Value="@context">
    <Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>
</CascadingValue>

@code{
    private ContextData context { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        
        base.OnInitialized();
    }

    private async Task Authorize(string token)
    {
        var res = await authService.CheckAuthorization(token);

        if (res.Data != null)
        {
            context.JwtToken = res.Data.AccessToken;
            context.CurrentUser = res.Data.User;
            context.IsAuthorized = true;
            await js.InvokeAsync<string>("localStorage.setItem", "token", res.Data.AccessToken);
        }
        else
        {
            context.IsAuthorized = false;
            context.JwtToken = null;
            context.CurrentUser = null;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!String.IsNullOrEmpty(context.JwtToken))
            {
                await Authorize(context.JwtToken);
            }
            else
            {
                var token = await js.InvokeAsync<string>("localStorage.getItem", "token");
                if (!String.IsNullOrEmpty(token))
                {
                    await Authorize(token);
                }
                else
                {

                }
            }

            StateHasChanged();
        }
    }
}